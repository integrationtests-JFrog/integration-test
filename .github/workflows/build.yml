name: Push the Docker image to AWS ECR Repo
on:
  push:
    branches:
      - main
jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Scan the container image - GitHub Anchore
        id: scan-image-github
        uses: anchore/scan-action@v3
        with:
          image: "$IMAGE_TAG"
          fail-build: false
          severity-cutoff: critical
          output-format: 'sarif'

      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan-image-github.outputs.sarif }}
          
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan-image-github.outputs.sarif }}

      - name: Scan the container image -  AWS
        id: scan-image-aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          aws ecr start-image-scan --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG

      - name: Wait for scan completion
        id: get-scan-aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          SCAN_STATUS="IN_PROGRESS"
          while [ "$SCAN_STATUS" = "IN_PROGRESS" ]; do
            echo "Waiting for scan to complete..."
            sleep 30
            SCAN_RESULT=$(aws ecr describe-image-scan-findings --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG)
            SCAN_STATUS=$(echo $SCAN_RESULT | jq -r '.imageScanStatus.status')
          done
          echo "Scan completed"
#          CRITICAL_COUNT=$(echo "$SCAN_RESULT" | jq '[.imageScanFindings.findings[] | select(.severity == "CRITICAL")] | length')
#          if [ "$CRITICAL_COUNT" -gt 0 ]; then
#            echo "Critical vulnerabilities found: $CRITICAL_COUNT"
#            exit 1
#          else
#            echo "No critical vulnerabilities found."
#          fi
#          echo $SCAN_RESULT

#      - name: Get image scan findings
#        id: get-scan
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
#        run: |
#          aws ecr describe-image-scan-findings --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG